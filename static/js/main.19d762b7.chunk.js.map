{"version":3,"sources":["assets/github.svg","assets/linkedin.svg","assets/resume.svg","assets/resume.pdf","assets/stylized.png","assets/code-for-faith.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppWrapper","styled","div","App","useState","userPicture","setUserPicture","generateRandomPicture","a","generatedHash","generateHash","picture","className","onClick","src","alt","href","target","GitHubSVG","LinkedInSVG","ResumePDF","ResumeSVG","StylizedImg","CodeForFaithImg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,itECU3C,IAAMC,E,OAAaC,EAAOC,IAAV,KAwNDC,MAlHf,WAAgB,IAAD,EACyBC,qBADzB,mBACNC,EADM,KACOC,EADP,KAGPC,EAAqB,uCAAG,8BAAAC,EAAA,sDACtBC,EAAgBC,MAEhBC,EAHsB,gDAG6BF,EAH7B,qBAK5BH,EAAeK,GALa,2CAAH,qDAQ3B,OACE,kBAACX,EAAD,KACE,yBAAKY,UAAS,QAAWC,QAAS,kBAAMN,MACtC,yBACEO,IACET,GAAW,wDAIbU,IAAG,MAGP,yBAAKH,UAAS,SACZ,uBAAGI,KAAI,4BAA+BC,OAAM,UAC1C,yBAAKH,IAAKI,IAAWH,IAAK,MAE5B,uBAAGC,KAAI,sCAAyCC,OAAM,UACpD,yBAAKH,IAAKK,IAAaJ,IAAK,MAE9B,uBAAGC,KAAMI,IAAWH,OAAM,UACxB,yBAAKH,IAAKO,IAAWN,IAAK,OAG9B,wBAAIH,UAAS,SAAb,uBACA,wBAAIA,UAAS,SAAb,aACA,yBAAKA,UAAS,aACZ,yBAAKA,UAAS,QACZ,yBAAKA,UAAS,cAAd,YACA,uBACEI,KAAI,qCACJC,OAAM,SACNL,UAAS,SAET,yBAAKE,IAAKQ,IAAaP,IAAG,MAE5B,yBAAKH,UAAS,eACZ,yBAAKA,UAAS,YAAd,6DAGA,yBAAKA,UAAS,QAAd,wCAGA,yBAAKA,UAAS,QAAd,eACe,IACb,uBAAGI,KAAI,qCAAwCC,OAAM,UAArD,uCAIF,yBAAKL,UAAS,QAAd,UACU,IACR,uBAAGI,KAAI,qCAAwCC,OAAM,UAArD,uCAIF,yBAAKL,UAAS,QAAd,eACe,IACb,uBACEI,KAAI,qDACJC,OAAM,UAFR,yDASN,yBAAKL,UAAS,QACZ,yBAAKA,UAAS,cAAd,kBACA,uBACEI,KAAI,2BACJC,OAAM,SACNL,UAAS,SAET,yBAAKE,IAAKS,IAAiBR,IAAG,MAEhC,yBAAKH,UAAS,eACZ,yBAAKA,UAAS,YAAd,kDAGA,yBAAKA,UAAS,QAAd,qDAGA,yBAAKA,UAAS,QAAd,eACe,IACb,uBAAGI,KAAI,2BAA8BC,OAAM,UAA3C,6BAIF,yBAAKL,UAAS,QAAd,UACU,IACR,uBAAGI,KAAI,8CAAiDC,OAAM,UAA9D,qDCxMMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19d762b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.d150d4d6.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.0e1dbd0a.svg\";","module.exports = __webpack_public_path__ + \"static/media/resume.9c30969a.svg\";","module.exports = __webpack_public_path__ + \"static/media/resume.ee6984b1.pdf\";","module.exports = __webpack_public_path__ + \"static/media/stylized.8b0ead53.png\";","module.exports = __webpack_public_path__ + \"static/media/code-for-faith.2c65c360.png\";","import React, { useState } from 'react';\nimport generateHash from 'random-hash';\nimport GitHubSVG from './assets/github.svg';\nimport LinkedInSVG from './assets/linkedin.svg';\nimport ResumeSVG from './assets/resume.svg';\nimport ResumePDF from './assets/resume.pdf';\nimport StylizedImg from './assets/stylized.png';\nimport CodeForFaithImg from './assets/code-for-faith.png';\nimport styled from 'styled-components';\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: center;\n  padding: 4rem 20px;\n  text-align: center;\n  font-family: 'Roboto Mono', monospace;\n  max-width: 43rem;\n  margin: auto;\n\n  h2 {\n    margin-bottom: 2rem;\n  }\n\n  .photo {\n    border-radius: 50%;\n    overflow: hidden;\n    width: 160px;\n    height: 160px;\n    box-shadow: 1px 1px 4px #111111;\n    cursor: pointer;\n\n    img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n  }\n\n  .links {\n    margin-top: 40px;\n\n    a {\n      &:not(:last-child) {\n        margin-right: 20px;\n      }\n    }\n\n    img {\n      height: 40px;\n    }\n  }\n\n  .title {\n    font-weight: bold;\n  }\n\n  .site-under-construction {\n    font-family: monospace;\n    font-size: 20px;\n    animation: blink 1s infinite;\n  }\n\n  .portfolio {\n    .item {\n      margin-top: 2rem;\n      line-height: 1.5;\n\n      .left {\n        text-align: left;\n      }\n\n      .title {\n        font-size: 1.2rem;\n        margin-bottom: 1rem;\n      }\n\n      .subtitle {\n        font-style: italic;\n        margin-bottom: 1rem;\n        color: #2f4f4f;\n      }\n\n      .image {\n        overflow: hidden;\n        height: 360px;\n        margin-bottom: 2rem;\n        display: block;\n        box-shadow: 1px 1px 4px #111111;\n\n        img {\n          width: 100%;\n          height: 100%;\n          object-fit: cover;\n        }\n      }\n      .description {\n      }\n    }\n  }\n\n  @keyframes blink {\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 100%;\n    }\n  }\n`;\n\nfunction App() {\n  const [userPicture, setUserPicture] = useState();\n\n  const generateRandomPicture = async () => {\n    const generatedHash = generateHash();\n\n    const picture = `https://avatars.dicebear.com/api/male/${generatedHash}.svg?mood[]=happy`;\n\n    setUserPicture(picture);\n  };\n\n  return (\n    <AppWrapper>\n      <div className={`photo`} onClick={() => generateRandomPicture()}>\n        <img\n          src={\n            userPicture\n              ? userPicture\n              : `https://avatars2.githubusercontent.com/u/13135150?v=4`\n          }\n          alt={``}\n        />\n      </div>\n      <div className={`links`}>\n        <a href={`https://github.com/RilDev`} target={`_blank`}>\n          <img src={GitHubSVG} alt={''} />\n        </a>\n        <a href={`https://www.linkedin.com/in/acyril/`} target={`_blank`}>\n          <img src={LinkedInSVG} alt={''} />\n        </a>\n        <a href={ResumePDF} target={`_blank`}>\n          <img src={ResumeSVG} alt={''} />\n        </a>\n      </div>\n      <h1 className={`title`}>Welcome to RilDev's</h1>\n      <h2 className={`title`}>Portfolio</h2>\n      <div className={`portfolio`}>\n        <div className={`item`}>\n          <div className={`title left`}>Stylized</div>\n          <a\n            href={`https://rildev.github.io/stylized/`}\n            target={`_blank`}\n            className={`image`}\n          >\n            <img src={StylizedImg} alt={``} />\n          </a>\n          <div className={`description`}>\n            <div className={`subtitle`}>\n              Make your prototypes look good with a stylish stylesheet!\n            </div>\n            <div className={`left`}>\n              Stack: CSS3, HTML5, JavaScript (ES6)\n            </div>\n            <div className={`left`}>\n              Website URL:{' '}\n              <a href={`https://rildev.github.io/stylized/`} target={`_blank`}>\n                https://rildev.github.io/stylized/\n              </a>\n            </div>\n            <div className={`left`}>\n              GitHub:{' '}\n              <a href={`https://github.com/RilDev/stylized`} target={`_blank`}>\n                https://github.com/RilDev/stylized\n              </a>\n            </div>\n            <div className={`left`}>\n              NPM Package:{' '}\n              <a\n                href={`https://github.com/RilDev/stylized/packages/361151`}\n                target={`_blank`}\n              >\n                https://github.com/RilDev/stylized/packages/361151\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className={`item`}>\n          <div className={`title left`}>Code for Faith</div>\n          <a\n            href={`https://codeforfaith.com`}\n            target={`_blank`}\n            className={`image`}\n          >\n            <img src={CodeForFaithImg} alt={``} />\n          </a>\n          <div className={`description`}>\n            <div className={`subtitle`}>\n              Heaven or Hell, where will you spend eternity?\n            </div>\n            <div className={`left`}>\n              Stack: GatsbyJS, ReactJS, JSX, CSS3, Multilingual\n            </div>\n            <div className={`left`}>\n              Website URL:{' '}\n              <a href={`https://codeforfaith.com`} target={`_blank`}>\n                https://codeforfaith.com\n              </a>\n            </div>\n            <div className={`left`}>\n              GitHub:{' '}\n              <a href={`https://github.com/RilDev/code-for-faith-ui`} target={`_blank`}>\n                https://github.com/RilDev/code-for-faith-ui\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* <div className={`site-under-construction`}> */}\n      {/*   Site Under Construction... */}\n      {/* </div> */}\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}